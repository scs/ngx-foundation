{"version":3,"sources":["../../src/reveal/reveal-backdrop.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,UAAA,EAAY,QAAA,EAAS,MAAO,eAAA,CAAgB;AAEhE,OAAO,EAAE,SAAA,EAAU,MAAO,wBAAA,CAAyB;AAGnD;IAGE,+BAAmB,OAA6B;QAFzC,YAAO,GAAW,IAAI,CAAC;QAG5B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC;IACH,4BAAC;AAAD,CANA,AAMC,IAAA;;AAED,8EAA8E;AAE9E;IA8BE,iCAAmB,OAAkB,EAAE,QAAiB;QARxD,iCAAiC;QACvB,aAAQ,GAAW,KAAK,CAAC;QAQjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAvBD,sBAAW,4CAAO;QATlB,oCAAoC;QACpC,6BAA6B;QAC7B,IAAI;QAEJ,yCAAyC;QACzC,8BAA8B;QAC9B,2FAA2F;QAC3F,IAAI;aAEJ;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;aAED,UAAmB,KAAa;YAC9B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,uFAAuF;QACzF,CAAC;;;OALA;IAcD,sBAAW,0CAAK;aAAhB,UAAiB,CAAmB;YAClC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAClB,CAAC;;;OAAA;IAOD,2CAAS,GAAT;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAcH,8BAAC;AAAD,CArDA,AAqDC;;AAbM,kCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,oBAAoB;gBAC9B,QAAQ,EAAE,qEAAqE;gBAC/E,2BAA2B;gBAC3B,IAAI,EAAE,EAAC,OAAO,EAAE,SAAS,CAAC,QAAQ,EAAC;aACpC,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,sCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,EAH6F,CAG7F,CAAC","file":"reveal-backdrop.component.js","sourceRoot":"","sourcesContent":["import { Component, ElementRef, Renderer } from '@angular/core';\n\nimport { ClassName } from './reveal-options.class';\nimport { RevealDirective } from './reveal.component';\n\nexport class RevealBackdropOptions {\n  public animate:boolean = true;\n\n  public constructor(options:RevealBackdropOptions) {\n    Object.assign(this, options);\n  }\n}\n\n/** This component will be added as background layout for modals if enabled */\n\nexport class RevealBackdropComponent {\n  // public get isAnimated():boolean {\n  //   return this._isAnimated;\n  // }\n\n  // public set isAnimated(value:boolean) {\n  //   this._isAnimated = value;\n  //   this.renderer.setElementClass(this.element.nativeElement, `${ClassName.FADE}`, value);\n  // }\n\n  public get isShown():boolean {\n    return this._isShown;\n  }\n\n  public set isShown(value:boolean) {\n    this._isShown = value;\n    // this.renderer.setElementClass(this.element.nativeElement, `${ClassName.IN}`, value);\n  }\n\n  public element:ElementRef;\n  public renderer:Renderer;\n\n  // protected _isAnimated:boolean;\n  protected _isShown:boolean = false;\n  private _modal: RevealDirective;\n\n  public set modal(m : RevealDirective) {\n    this._modal = m;\n  }\n\n  public constructor(element:ElementRef, renderer:Renderer) {\n    this.element = element;\n    this.renderer = renderer;\n  }\n\n  hideModal() {\n    if (this._modal && this._modal.config.closeOnClick) {\n      this._modal.hide();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'zf-reveal-backdrop',\n  template: '<div style=\"width: 100%; height: 100%\" (click)=\"hideModal()\"></div>',\n  // tslint:disable-next-line\n  host: {'class': ClassName.BACKDROP}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}